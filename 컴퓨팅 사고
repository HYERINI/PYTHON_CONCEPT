컴퓨팅 사고 (COMPUTATIONAL THINKING)
-- 문제를 구성하고 그 문제에 대한 해결 방안을 만드는 사고 과정
-- 컴퓨터(또는 사람이나 기계같은 에이전트)가 생각하는 방식으로 문제를 푸는 효과적인 방법을 고안해내는 사고

컴퓨터가 사고하는 방식
-- INPUT : 입력으로 컴퓨터는 마우스, 키보드, 센서 등에서 입력을 받는다.
-- PROCESSING : 입력 받은 데이터를 연산 및 처리해서 정보로 변환하는 과정
-- OUTPUT : 출력으로 컴퓨터는 화면, 스피커, 출력장치에 연결된 모터 등으로 출력한다.
-- MEMORY : 단기, 장기 기억장치

컴퓨터의 (입력 - 처리 - 출력)
-- 이진수의 0과 1로 표현
-- '비트(BIT)'를 8개씩 묶어 '바이트(BYTE)'로 표현

부호화
-- 컴퓨터가 이해할 수 있는 이진수 형태의 값과 사람이 이해할 수 있는 숫자, 알파벳, 또는 다른 정보들을 연동시키는 방법


아스키코드(ASCII, American Standard Code for Information Interchange)
-- 7비트의 진수를 이용해서 영문 알파벳, 아라비아 숫자, 특수 기호, 공백 문자, 그 밖의 제어 문자 등을 포함
-- 최대로 표현할 수 있는 문자의 개수 : 256글자

유니코드(UNICODE)
-- 더 많은 바이트를 사용해서 세계의 모든 언어들을 표현할 수 있는 코드
-- 파이썬 : UTF-8 유니코드

프로그래밍
-- 컴퓨팅 사고를 통해 만들어낸 문제를 해결하는 방법을 컴퓨터로 하여금 이해할 수 있도록 명령문으로 옮기는 통역작업
-- 매우 엄격한 문법을 사용하고, 컴퓨터가 이해하지 못하는 명령문을 사용해서는 안된다.
-- 컴퓨터가 이해할 수 있는 프로그래밍 언어로 작업을 기술하는 부분, 실제 컴퓨터로 하여금 실행시켜보는 부분, 
   결과를 확인하고 잘못 실행될 때 이를 해결하는 오류 수정 작업들이 필연적으로 포함된다. 

알고리즘 
-- 데이터와 절차를 처리하는 최적화된 규칙

컴퓨터 사고 과정 ( 아래의 세부 과정들이 반복적으로 수행된다)
-- 1. 문제 정의 : 문제를 푸는 목적을 분명히 하고, 명확하게 무엇을 풀어야 하는지 정의한다.
-- 2. 문제 분석 : 문제해결 영역으로 넘어가지 않은 상태에서 문제를 분석하고 컴퓨터로 하여금 어떻게 풀어갈지 생각해낸다.
                 사람이거나 문제를 인식한 주체를 주어로 생각하여 문제가 왜 문제인지 인식한다.
-- 3. 추상화 : 컴퓨터로 하여금 문제를 해결하도록 하기 위해 어떤 부분을 부각시키고 어떤 부분을 무시해도 되는 지에 대해 고려하는 작업
              핵심이 되는 필요한 특징만을 남겨두고 나머지는 제거하여 문제를 간단하게 모델링(MODELING)하는 방법
-- 4. 문제 분해 : 문제를 좀 더 작게, 문제해결에 필요한 데이터 및 절차를 세분화하는 것
-- 5. 문제 해결 과정 작성(알고리즘) : 문제를 다른 사람이나 컴퓨터를 이용해서 해결할 수 있도록 세분화된 과정을 작성하는 것

프로그래밍 과정
-- 컴퓨팅 사고 과정에서 만들어진 문제 해결 방법들을 컴퓨터로 하여금 실행시킬 수 있도록 하는 작업 과정
-- 1. 코딩(컴퓨터 프로그래밍) : 컴퓨팅 사고 과정에서 작성한 문제 해결 과정을 컴퓨터가 이해할 수 있는 언어인 프로그래밍 언어를 통해 명령을 전달하는 작업
-- 2. 실행 및 결과 확인 : 컴퓨터 프로그래밍이 끝나면 컴퓨터에서는 필요한 입력을 취해서 실행하고, 그 결과를 사람 또는 컴퓨터가 확인한다.
                        결과에 따라 이전 단계로 돌아가서 프로그램을 수정해야 할지 혹은 결과가 나와서 프로그래밍 과정을 멈출 것인지 결정한다.

