//파이썬의 거북이 그래픽 기능을 이용해서 그림 그리는 작업과정//

import turtle
turtle.Screen()
turtle.Turtle()


1. 파이썬이 제공하는 거북이 그래픽 기능을 사용할 수 있도록 요청한다.
   -> import turtle : 거북이 그래픽을 제공하는 turtle이라는 모듈을 사용하겠다고 명시 
   
2. 거북이 그래픽을 사용할 윈도우를 생성한다.
   -> turte.Screen() : 거북이 로봇이 그림을 그릴 수 있는 캔버스 영역이 포함된다.
   
3. 거북이 로봇을 만들어서 캔버스 위에 위치시킨다.
   -> turtle.Turtle() : 거북이 로봇 객체를 생성한다.
                      : 아무것도 없던 캔버스 영역에 화살표 모양의 거북이 로봇이 나타난다. 
   -> turtle.Turtle()
      turtle.Turtle() : 두 개의 거북이 로봇을 생성한다. 
     
4. 프로그램 종료 
   -> 파이썬의 거북이 그래픽을 이용할 때에는 더 이상 실행시킬 코드가 없을 때에는 종료하게 되고, 
      그 때에는 현재까지 만들었던 윈도우나 거북이 로봇들을 함께 종료시키고 제거한다.
      
// 파이썬의 변수//

1. 변수란?
   -> 변수는 값을 의미하거나 값을 담고 있는 공간(상자)을 의미
   -> '=' 기호(대입 연산자)는 이름을 붙이거나 값을 넣는 용도로 사용할 수 있다.
   
2. 변수의 이름 생성하기
   -> 거북이이름 = turtle.Turtle()
   -> t1 = turtle.Turtle()
      t2 = turtle.Turtle()

3. 캔버스의 이름 생성하기
   -> 캔버스이름 = turtle.Screen()
   -> win = turtle.Screen()
   -> win2 = turtle.Screen()
   
EX) win = turtle.Screen()      //캔버스 윈도우 생성을 요청하고 이름을 win이라고 붙임 
    win2 = turtle.Screen()     //위에서 생성된 캔버스 윈도우에 win2라는 이름을 추가로 붙임
    t1 = turtle.Turtle()       //거북이 로봇의 생성을 요청하고 이름을 t1이라고 붙임
    t2 = turtle.Turtle()       //새로운 거북이 로봇의 생성을 요청하고 이름을 win이라고 붙임. 첫 줄에서 캔버스 윈도우의 이름으로 사용된 win을 거북이 로봇이름으로 사용함
    math = 90                  //math라는 변수 공간을 새로 만들고 그 공간에 90이라는 값을 넣음
    math = 85                  //여기서 사용되는 math라는 변수 공간은 새롭게 만들어지는 것이 아니라 위에서 생성된 변수 공간을 재사용하고 그 공간에 85라는 값을 새로 넣음
    
    ↘ 변수에 저장된 90이나 85처럼 코드 상에서 사용된 숫자들은 숫자 상수 또는 상수라고 부른다.
       변수는 프로그램이 실행되면서 값이 바뀔 수 있지만 코드 상에서 사용된 숫자 값들은 그 값이 절대로 변할 수 없기 때문에 항상 값을 유지한다는 의미로 상수라고 부른다.
       
       
//거북이를 이용해서 그림 그리기//

1. 거북이 모양 바꾸기
   -> shape() 명령 사용
   -> import turtle
      win = turtle.Screen()
      t1 = turtle.Turtle()
      
      t1.shape("turtle")
   -> 거북이 모양 종류 - arrow : 삼각형 모양
                      - turtle : 거북이 모양
                      - circle : 원 모양
                      - square : 사각형 모양
                      - triangle : 삼각형 모양
                      - classic : 화살표 모양. 처음 거북이 그래픽을 사용해서 거북이 로봇을 생성하면 나타나는 모양
 2. 거북이 움직이기
    -> import turtle
       win = turtle.Screen()
       t1 = turtle.Turtle()
       t1.forward(100)    //t1이라는 거북이에게 현재 향하고 있는 방향으로 100만큼 이동하라는 명령
       t1.left(90)        //t1이라는 거북이에게 현재 바라보고 있는 방향으로부터 반시계 방향으로 90도만큼 회전하라는 명령
       t1.right(90)       //t1이라는 거북이에게 현재 바라보고 있는 방향으로부터 시계 방향으로 90도만큼 회전하라는 명령

EX) 큰 'ㄱ'자 그리기
    import turtle
    win = turtle.Screen() 
    t1= turtle.Turtle()
    
    x= 100
    t1.backward(x)
    t1.left(90)
    t1.forward(x)
    
3. 색상 저장해서 그림 그리기
   -> pencolor()명령 사용
   -> import turtle
      win = turtle.Screen()
      t1 = turtle.Turtle()
      t1.forward(100)
      t1.right(90)
      t1.pencolor("red")
      t1.forward(100)
    
   -> 상세하게 색상 지정하는 코드 : 빨간색, 초록색, 파란색의 깊이 정도를 정해줘 새로운 색상을 만든다.
      import turtle
      
      win = turtle.Screen()
      t1 = turtle.Turtle()
      t1.pencolor((1.0, 0.0, 0.0))      //빨간색
      t1.forward(100)
      t1.pencolor((0.0, 0.0, 1.0))      //파란색
      t1.forward(100)
      
   -> pencolor() 명령의 색상을 0~255까지의 정수로 표현한다.
      import turtle
      
      win = turtle.Screen()
      t1 = turtle.Turtle()
      win.colormode(255)
      t1.pencolor(255, 0, 0)    //빨간색
      t1.forward(100)
      t1.pencolor(0, 0, 255)    //파란색
      t1.forward(100)

4. 거북이 속도 조절하기
   -> speed() 명령 사용 : 1 ~ 10 까지의 값으로 전달한다.
   -> import turtle
      win = turtle.Screen()
      t1 = turtle.Turtle()
      t1.speed(1)
      t1.forward(100)
      
5. 마우스 버튼 클릭으로 프로그램 종료하기
   -> exitonclick() 명령 사용 
   -> EX) 'ㄱ'자를 그리고 사용자가 마우스의 왼쪽 버튼을 클릭하면 종료
          import turtle
          win = turtle.Screen()
          t1 = turtle.Turtle()
          t1.forward(100)
          t1.right(90)
          t1.forward(100)
          win.exitonclick()
