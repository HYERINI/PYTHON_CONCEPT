숫자형
-- 정수형 : 양의 정수, 음의 정수, 숫자 0
-- 실수형 : 소수점이 존재하는 숫자형 데이터
-- 8진수(Octal) : 숫자가 0o 또는 0O로 시작하면 된다. 
-- 16진수(Hexadecimal) : 숫자가 0x로 시작하면 된다.

문자열 자료형(String)
-- 문자열에 작은따옴표와 큰따옴표 포함시키기
   -> 백슬래시(\) 사용 : \' or \"
-- 여러 줄인 문자열을 변수에 대입하고 싶을 때
   -> \n 삽입하기
   -> 연속된 작은따옴표 3개 또는 큰따옴표 3개 사용하기
      EX) multiline='''
          Life is too short
          You need python
          '''
     
문자열 연산하기

-- 문자열 더해서 연결하기(Concatenation)
   Ex) head = "Python"
       tail = "is fun!"
       head + tail
       __'Python is fun!'
       
-- 문자열 곱하기
   EX) a = "python"
       a * 2
       __ 'pythonpython'

-- 문자열 길이 : len()

-- 문자열 인덱싱 : 마이너스(-)는 뒤에서부터 센다
   EX) a = "Life is too short, You need Python"
       a[-1] = 'n'
       
-- 문자열 슬라이싱 : 문장에서 단어를 뽑아내는 방법
   EX) a = "Life is too short, You need Python"
       b = a[0] + a[1] + a[2] + a[3]
       b = 'Life'
   -> 슬라이싱(Slicing)기법 사용 : b = a[0:4] = 'Life'
   
-- 문자열 포매팅 : 문자열 안의 특정한 값을 바꾸는 것 즉 문자열 안에 어떤 값을 삽입하는 방법
   
   -> 숫자 바로 대입 
      EX) "I eat %d apples." % 3
          __'I eat 3 apples.'
   
   -> 문자열 바로 대입
      EX) "I eat %s apples." % "five"
          __'I eat five apples.'
          
   -> 숫자 값을 나타내는 변수로 대입
      EX) number = 3
          "I eat %d apples." % number
          __ 'I eat 3 apples.'
          
   -> 2개 이상의 값 넣기
      EX) number = 10
          day = "three"
          "I ate %d apples. so I was sick for %s days." % (number, day)
          __ 'I ate 10 apples. so I was sick for three days.'
          
-- 포맷 코드와 숫자 함께 사용하기
   -> 정렬과 공백
      EX) "%10s" % "hi"
         ___'        hi'           //전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬
                                     그 앞의 나머지는 공백으로 남겨둠
      EX) "%-10sjane." % 'hi'
         ___'hi      jane.'        //hi 왼쪽 정렬, 나머지는 공백으로 채움
       
   -> 소수점 표현하기
      EX) "%0.4f" % 3.424252
         ___'3.4242'               // 소수점 네 번째 자리까지만 나타냄
         
-- format 함수를 사용한 포매팅
   -> 숫자 바로 대입하기
      EX) "I eat {0} apples.".format(3)
         ___ 'I eat 3 apples'                //{0} 부분이 3으로 바뀐다
       
   -> 문자열 바로 대입하기
      EX) "I eat {0} apples".format("five")
         ___ 'I eat five apples'             //{0} 부분이 five로 바뀐다
         
   -> 숫자 값을 가진 변수로 대입하기
      EX) number = 3
          "I eat {0} apples.".format(number)
          ___ 'I eat 3 apples'               //{0} 부분이 number 변수 값인 3으로 바뀐다
          
   -> 2개 이상의 값 넣기
      EX) number = 10
          number1 = "three"
          "I ate {0} apples and {1} bananas.".format(number, number1)
          ___ 'I ate 10 apples and three bananas.'                    //문자열의 {0},{1}과 같은 인덱스 항목이 순서에 맞게 바뀜
          
   -> 이름으로 넣기
      EX) "I ate {number} apples and {number1} bananas.".format(number = 10, number1 = 3)
         ___'I ate 10 apples and three bananas.'                     //인덱스 대신 이름 사용
        
   -> 혼용
   
   -> 소수점 표현하기
      EX) y = 3.532443
          "{0:0.4f}".format(y)
          ___ '3.5324'
          
      EX) "{0:10.4f}".format(y)
          ___ '    3.5324'             //자릿수를 10으로 맞추고, 소수점은 4자리까지만 표현(소수점도 자릿수에 포함)
   
문자열 정렬하기

-- 왼쪽 정렬
   -> :< 사용 
   -> EX) "{0:<10}".format("hi")
          ___'hi        '

-- 오른쪽 정렬
   -> :> 사용 
   -> EX) "{0:>10}".format("hi")
          ___'        hi'
         
 -- 가운데 정렬
    -> :^ 사용 
    -> EX) "{0:^10}".format("hi")
           ___'    hi    '
           
 -- 공백 채우기
    -> 사용한 기호 사이에 채워 넣을 문자 값 넣기
    -> EX) "{0:=^10}".format("hi")
           ___'====hi===='
           
 f 문자열 포매팅
 
 -- 문자열 앞에 f 접두사를 붙여서 사용
    -> EX) f'{"hi":<10}'
          ___'hi        '
          
 문자열 관련 함수들
 -- 문자열 변수 이름 뒤에 '.'를 붙인 다음 함수 이름을 써주면 됨 { EX) a.count('b') }
    -> count   : 문자 개수 세기 
       find    : 위치 알려주기   : 찾는 문자가 처음으로 나온 위치를 반환함
                                 찾는 문자 or 문자열이 존재하지 않으면 -1 반환
       index   : 위치 알려주기   : 찾는 문자가 처음으로 나온 위치를 반환함
                                 찾는 문자 or 문자열이 존재하지 않으면 오류를 발생시킴
       join    : 문자열 삽입     : EX) ",".join('abcd')  ___ 'a,b,c,d'
       upper   : 소문자를 대문자로
       lower   : 대문자를 소문자로
       lstrip  : 왼쪽 공백 지우기
       rstrip  : 오른쪽 공백 지우기
       strip   : 양쪽 공백 지우기
       replace : 문자열 바꾸기   : replace(바뀌게 될 문자열, 바꿀 문자열)
       split   : 문자열 나누기   : a.split(나누는 기준)
                                  EX) a.split(:) - ':'를 기준으로 문자열을 나누어준다
      
      
      
      
      
      
      
      
      
      
