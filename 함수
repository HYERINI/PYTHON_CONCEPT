1. 함수의 구조

   -> def 함수명(매개변수):
          수행할 문장1
          수행할 문장1
          ...
   -> EX) def add(a,b)
              return a + b
        
2. 매개변수(parameter)와 인수(argument)  

   -> def add(a, b):      //이 때의 a와 b는 매개변수
          return a + b          
      print(add(3,5))      //이 때의 3과 4는 인수
      
3. 일반적인 함수 : 결괏값을 받을 변수 = 함수이름(입력인수1, 입력인수2, ...)

   -> def 함수이름(매개변수):
         수행할 문장
         ...
         return 결과값
         
4. 입력값이 없는 함수 : 결괏값을 받을 변수 = 함수이름()
   
   -> def say():
         return 'Hi'
      -> 사용 방법 -> a = say()
                     print(a)
                     ___ Hi
                     
5. 결괏값이 없는 함수 : 함수이름(입력인수1, 입력인수2, ...)
   
   -> def add(a, b):
          print("%d, %d의 합은 %d입니다." %(a, b, a+b))   
          // 결괏값은 오직 return 명령어로만 돌려받을 수 있음
          
6. 입력값도 결괏값도 없는 함수 : 함수이름()
   
   -> def say():             //매개변수 없음
         print('Hi')         //return문 없음. 결괏값 없음
      -> 사용 방법 -> say()
                     __ Hi
                     
7. 매개변수 지정하여 함수 호출하기
   -> def add(a, b):
         return a+b
      result = add(a=3, b=7)     //a와 b의 순서가 바뀌어도 사용 가능!
      print(result)
      ___ 10
      
8. 입력값의 개수를 모를 때 함수 사용하기
   -> def 함수이름(*매개변수):       //매개변수 여러 개 사용 가능!
         수행할 문장
         ...
   -> EX) 여러 개의 입력값을 받는 함수 만들기
          def add_many(*args):       //입력값을 전부 모아서 튜플()로 만들어줌
               result = 0
               for i in args:
                   result = result + i
               return result
               
 9. 키워드 파라미터 kwargs
    -> EX) def print_kwargs(**kwargs):  //kwargs : 관례적으로 사용됨
               print(kwargs)
           //매개변수 앞에 **을 붙이면 매개변수는 딕셔너리가 되고, key=value 형태의 결괏값이 그 딕셔너리에 저장된다.
           print_kwargs(a=1)
           ___ {'a' : 1}
           print_kwargs(name='foo', age = 3)
           ___ {'age' : 3, 'name' : 'foo'}

10. 함수의 결괏값은 언제나 하나.
    -> 결괏값이 두 개인 함수를 호출하면 결괏값은 튜플값으로 돌려준다. 
       -> EX) def add_and_mul(a,b):
                  return a+b, a*b       //여기서 return문 2번 사용하면 a+b만 돌려줌.
              result = add_and_mul(3,5)
              ___ result = (8, 15)      // 튜플값
    -> 함수는 return문을 만나는 순간 결괏값을 돌려주고 함수를 빠져나간다.
       이 원리로 return을 단독으로 쓰면 함수를 즉시 빠져나갈 수 있다.
       -> EX) def say_nick(nick):
                  if nick == "바보":
                     return
                  print("별명은 %s이다." % nick)
              say_nick('야호')
              ___ 별명은 야호이다.
              say_nick('바보')
              // 함수를 빠져나와버림.
              
11. 매개변수에 초깃값 미리 설정하기
    -> def say_myself(name, old, man=True):       //man=True 부분이 매개변수에 미리 값 넣어준 부분
           print("이름 : %s" %name)
           print("나이 : %d" %old)
           if man:
               print("남자입니다")
           else:
               print("여자입니다")
               
       say_myself("이두희", 53)           
       //man 변수에는 입력값을 주지 않았지만 초깃값 True를 갖게 됨. 실행하면 "남자입니다" 출력
       say_myself("이두희", 53, True)
       //남자입니다 출력
       say_myself("이두희", 53, False)
       //man 변수에 False 값이 대입됨. 실행하면 "여자입니다" 출력
       
   -> 주의할 점 : 초깃값을 설정해놓은 매개변수 뒤에 초깃값을 설정해놓지 않은 매개변수 사용 불가능!!
      위의 예시에서 def say_myself(name, man=True, old)라고 함수를 선언하면 say_myself("이두희", 53)
      을 실행할 때 53이라는 숫자가 man 변수와 old 변수 중 어느 곳에 대입해야 할지 알 수 없음. -> 오류!!
      
12. 함수 안에서 선언한 변수의 효력 범위
    -> 함수 안에서 사용하는 매개변수는 함수 밖의 변수 이름과는 전혀 상관이 없다. 
    -> 함수 안에서 새로 만든 매개변수는 함수 안에서만 사용하는 "함수만의 변수"
    
13. 함수 안에서 함수 밖의 변수를 변경하는 방법
    [방법1] return 사용
           EX) a = 1
               def vartest(a):
                   a = a + 1
                   return a
               a = vartest(a)
               print(a)                 //vartest함수 안의 a와 함수 밖의 a는 다른 것
               
    [방법2] global 명령어 사용(권장X)
           EX) a = 1
               def vartest():
                   global a            //함수 안에서 함수 밖의 a 변수를 직접 사용함
                   a = a + 1
               vartest()
               print(a)
               
14. lambda
    -> 함수를 생성할 때 사용하는 예약어
    -> def와 동일한 역할
    -> 함수를 한줄로 간결하게 만들 때 사용한다
    -> return 명령어가 없어도 결괏값을 돌려준다
    
    -> 사용방법 : lambda 매개변수1, 매개변수2, ... : 매개변수를 이용한 표현식
    -> EX) add = lambda a, b : a+b
           result = add(3,4)
           print(result)
           ___ 7
       
       
