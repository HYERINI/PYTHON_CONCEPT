딕셔너리(Dictionary)  : Key 와 Value를 한 쌍으로 갖는 자료형
                     : EX) dic = {'name' : 'pey', 'phone' : '010109' , 'birth' : '0119'}
                           // key : value 형태
                     : value에는 리스트도 넣을 수 있음
        
딕셔너리 쌍 추가하기
-> EX) a = {1: 'a'}
       a[2] = 'b'                //딕셔너리변수이름[key] = 'value'
       __ a = {1: 'a', 2: 'b'} 
       
딕셔너리 요소 삭제하기
-> EX) a = {1: 'a', 2: 'b'}
       del a[1]                  //del 딕셔너리변수이름[key]
       __ a = {2: 'b'}

딕셔너리에서 Key 사용해 Value 얻기
-> 딕셔너리변수이름[Key] 사용
-> EX) grade = {'pey': 10, 'julliet': 99}
       grade['pey'] 
       __ 10
       
       
딕셔너리에서의 주의사항
-> Key는 고유한 값이므로 중복되는 Key 값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시된다.
-> Key에 튜플은 쓸 수 있지만, 리스트는 쓸 수 없다.
-> Value에는 변하는 값이든 변하지 않는 값이든 상관없이 넣을 수 있다.

딕셔너리 관련 함수들 (a는 딕셔너리변수이름)
1. a.keys() : 딕셔너리 a의 Key만을 모아서 dict_keys 객체를 돌려준다.
   -> 실행결과 : dict_keys(['name', 'phone', 'birth'])
   -> list(a.keys()) : 반환값으로 리스트가 필요한 경우 사용(3.0 이후 버전)
   
2. a.values() : 딕셔너리 a의 Value만을 모아서 dict_values 객체를 돌려준다.
   -> 실행결과 : dict_values(['pey', '011023', '0119'])
   
3. a.items() : Key와 Value의 쌍을 튜플로 묶은 값을 dict_items 객체로 돌려준다.
   -> 실행결과 : dict_items([('name', 'pey'), ('phone', '011023'), ('birth', '0119')])
   
4. a.clear() : Key: Value 쌍 모두 지우기
   -> 실행결과 : a = {}
   
5. Key로 Value 얻기
  -> a.get(x) : x라는 Key에 대응되는 Value를 돌려준다.
  -> a[x] 와 a.get(x)의 차이 
     : a[x] : 존재하지 않는 키(nokey)로 값을 가져오려고 할 경우 오류 발생
     : a.get(x) : 존재하지 않는 키로 값을 가져오라고 할 경우 None 출력
  -> 딕셔너리 안에 찾으려는 Key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져오게 하고 싶다면?
     : get(x, '디폴트 값') 사용    //x 값이 없으면 디폴트 값을 출력해준다.
     
6. 해당 Key가 딕셔너리 안에 있는지 조사하기
  -> 'Key' in 딕셔너리변수이름   
     : 있다면 True, 없다면 False를 돌려준다. 




